version: '3'

vars:
  TITLE: "AppGateway for Containers Demo"
  DEFAULT_REGION: "canadacentral"
  DEPLOY_PROMETHEUS: true
  DEFAULT_DOMAIN: "bjdazure.tech"
  SKU: "Standard_B4ls_v2"
  DEFAULT_COUNT: 3

tasks:
  default:
    desc: Calls `task --list` 
    cmds:
    - task --list

  register:
    desc: Registers the required RP for App Gateways for Containers
    cmds:
    #- az provider register --namespace Microsoft.ContainerService
    #- az provider register --namespace Microsoft.Network
    - az provider register --namespace Microsoft.NetworkFunction
    - az provider register --namespace Microsoft.ServiceNetworking
    - az extension add --name alb --allow-preview 
  up:
    desc: Creates a {{.TITLE}} environment
    cmds:
    - terraform workspace new {{.REGION}} || true
    - terraform workspace select {{.REGION}}
    - terraform init
    - task: apply
      vars:
        REGION: '{{.REGION}}'
        TAGS: '{{.TITLE}}'
        NODE_COUNT: '{{default .DEFAULT_COUNT .COUNT }}'
    - task: creds
    - task: gateway
    vars: 
      REGION: '{{default .DEFAULT_REGION (split " " .CLI_ARGS)._0}}'
      NODE_COUNT: '{{default .DEFAULT_COUNT .COUNT }}'
      
  apply:
    desc: Applies the Terraform templates
    cmds:
    - terraform apply -auto-approve -compact-warnings
        -var "region={{.REGION}}" 
        -var "vm_size={{.SKU}}"
        -var "node_count={{.NODE_COUNT}}" 
        -var "tags={{.TITLE}}" 
        -var "enable_managed_offerings={{.DEPLOY_PROMETHEUS}}" 
    vars: 
      REGION: '{{default .DEFAULT_REGION (split " " .CLI_ARGS)._0}}'
      NODE_COUNT: '{{default .DEFAULT_COUNT (split " " .CLI_ARGS)._1 }}'

  refresh:
    desc: Applies the Terraform templates
    cmds:
    - terraform refresh
        -var "region={{.REGION}}" 
        -var "vm_size={{.SKU}}"
        -var "node_count={{.NODE_COUNT}}" 
        -var "tags={{.TITLE}}" 
        -var "enable_managed_offerings={{.DEPLOY_PROMETHEUS}}" 
    vars: 
      REGION: '{{default .DEFAULT_REGION (split " " .CLI_ARGS)._0}}'
      NODE_COUNT: '{{default .DEFAULT_COUNT (split " " .CLI_ARGS)._1 }}'

  creds:
    desc: Gets AKS credential file
    cmds:
    - az aks get-credentials -g {{.RG}} -n {{.AKS}} --overwrite-existing
    - cmd: sed -i s/devicecode/azurecli/g ~/.kube/config
      silent: true
    vars:
      RG: 
        sh: terraform output -raw AKS_RESOURCE_GROUP
      AKS: 
        sh: terraform output -raw AKS_CLUSTER_NAME

  apps:
    desc: Deploy the AppGw for Container AKS Components
    cmds:
    - cmd: echo -e '➡️\033[1m\e[38;5;45mInstalling ALB Controller with Helm Chart'
      silent: True
    - cmd: helm upgrade -i alb-controller oci://mcr.microsoft.com/application-lb/charts/alb-controller 
            --create-namespace
            --namespace azure-alb-system
            --version 1.4.14 
            --set albController.namespace=azure-alb-system
            --set albController.podIdentity.clientID={{.ALB_IDENTITY_CLIENT_ID}}
      silent: True
    - cmd: echo -e '➡️\033[1m\e[38;5;45mUpdating cluster configs for application deployments'
      silent: True
    - cmd: export ALB_FRONTEND_NAME="{{.ALB_FRONTEND_NAME}}" ; 
           export ALB_RESOURCE_ID="{{.ALB_RESOURCE_ID}}"     ;
           export DEFAULT_DOMAIN="{{.DEFAULT_DOMAIN}}"       ;
           envsubst < cluster-config/websocket/gateway.tmpl > cluster-config/websocket/gateway.yaml
      silent: True
    - cmd: export ALB_FRONTEND_NAME="{{.ALB_FRONTEND_NAME}}" ; 
           export ALB_RESOURCE_ID="{{.ALB_RESOURCE_ID}}"     ;
           export DEFAULT_DOMAIN="{{.DEFAULT_DOMAIN}}"       ;
           envsubst < cluster-config/httpbin/gateway.tmpl > cluster-config/httpbin/gateway.yaml
      silent: True      
    - git add cluster-config/httpbin/gateway.yaml
    - git add cluster-config/websocket/gateway.yaml
    - git commit -m "Updated cluster config values for app deployments"
    - git push      
    vars:
      ALB_IDENTITY_CLIENT_ID: 
        sh: terraform output -raw ALB_IDENTITY_CLIENT_ID
      ALB_RESOURCE_ID:
        sh: terraform output -raw ALB_RESOURCE_ID
      ALB_FRONTEND_NAME:
        sh: terraform output -raw ALB_FRONTEND_NAME

  websocket: 
    desc: Test out the default WebSocket sample Application
    cmds:
    - cmd: echo -e '➡️\033[1m\e[38;5;45m Test for websocat existence'
      silent: true
    - cmd: websocat --version 2>>/dev/null
      silent: true
    - websocat -t - --ws-c-uri=ws://chat.{{.DEFAULT_DOMAIN}}/chat ws-c:tcp:{{.GATEWAY_IP}}:80      
    vars:
      GATEWAY_URL:
        sh: kubectl -n ws-example get gateway  ws-demo-gatewayy  -o jsonpath='{.status.addresses[0].value}'
      GATEWAY_IP: 
        sh: dig +short {{.GATEWAY_URL}}

  httpbin: 
    desc: Test out the Httpbin sample Application
    cmds:
    - curl http://httpbin.{{.DEFAULT_DOMAIN}}/ tcp:{{.GATEWAY_IP}}:80      
    vars:
      GATEWAY_URL:
        sh: kubectl get gateway httpbin-gateway  -o jsonpath='{.status.addresses[0].value}'
      GATEWAY_IP: 
        sh: dig +short {{.GATEWAY_URL}}

  down:
    desc: Destroys all Azure resources and cleans up Terraform
    cmds:
    - az group list --tag Application="{{.TITLE}}" --query "[].name" -o tsv | xargs -ot -n 1 az group delete -y --verbose --no-wait -n  || true
    - rm -rf terraform.tfstate.d .terraform.lock.hcl .terraform terraform.tfstate terraform.tfstate.backup .terraform.tfstate.lock.info || true
